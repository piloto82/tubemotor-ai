
import { GoogleGenAI, GenerateContentResponse, Modality } from "@google/genai";
import type { ScriptCreatorData, ViralTitlesData, ScriptTranslatorData, ScenePromptsData, ThumbnailPromptsData, ImageGeneratorData, SrtConverterData, TextSplitterData, VideoGeneratorData, CapcutOptimizerData, TextToSpeechData } from '../types';

let ai: GoogleGenAI | null = null;
// FIX: Removed VITE_API_KEY in favor of process.env.API_KEY as per guidelines.

function getAI() {
  if (!ai) {
    // FIX: Use process.env.API_KEY as per guidelines.
    if (!process.env.API_KEY) {
      throw new Error("The API_KEY environment variable has not been set.");
    }
    // FIX: Use process.env.API_KEY as per guidelines.
    ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  }
  return ai;
}

const storyNicheValues = new Set([
  'hist-plot-twist',
  'hist-finais-inteligentes',
  'hist-terror-suspense',
  'hist-emocionantes',
  'hist-superacao',
  'hist-animais',
  'hist-idosos',
  'hist-epoca',
  'hist-entrevistas-inspiradoras',
  'hist-testemunhos-transformacao',
  'hist-romance-interracial',
  'hist-relacionamentos-idades-diferentes'
]);

const childrenNicheValues = new Set([
  'infantil-animacao-0-3',
  'infantil-musica-0-3',
  'infantil-animacao-4-6',
  'infantil-musica-4-6',
]);

export const generateScript = async (data: ScriptCreatorData): Promise<string> => {
  try {
    const gemini = getAI();
    
    let prompt = '';

    if (storyNicheValues.has(data.structure)) {
      // PROMPT MESTRE PARA O NICHO DE HIST√ìRIAS
      prompt = `
**PROMPT MESTRE DE CRIA√á√ÉO DE ROTEIRO (NICHO: HIST√ìRIAS & EMO√á√ÉO) - TUBEMOTOR AI**

**OBJETIVO:** Gerar um roteiro de alta reten√ß√£o para o YouTube, seguindo REGRAS FUNDAMENTAIS de forma estrita. A prioridade m√°xima e inegoci√°vel √© respeitar o limite de caracteres por bloco. A gera√ß√£o ser√° considerada uma falha se o limite for ignorado.

**DADOS DE ENTRADA:**
- Nicho: ${data.niche}
- P√∫blico-Alvo: ${data.audience}
- Tema: ${data.theme}
- Tom Narrativo: ${data.tone}
- Idioma: ${data.language}
- F√≥rmula de Estrutura (Conceito): ${data.structure}
- N√∫mero de Blocos: ${data.blocks}
- Caracteres por Bloco (PRIORIDADE M√ÅXIMA): ${data.charsPerBlock}

---

**üéØ REGRAS FUNDAMENTAIS (OBRIGAT√ìRIO SEGUIR):**

**1. LIMITE DE CARACTERES (REGRA N¬∫ 1):**
- O texto da hist√≥ria de cada bloco DEVE ter **APROXIMADAMENTE ${data.charsPerBlock} caracteres**. √â a regra mais importante. N√ÉO exceda significativamente este limite.

**2. FORMATO DO TEXTO:**
- **PRIMEIRA PESSOA:** Narrativa em primeira pessoa, cont√≠nua, como se a protagonista estivesse contando a hist√≥ria.
- **SEM MARCA√á√ïES T√âCNICAS:** Texto limpo, pronto para narra√ß√£o, sem "(pausa)", "CENA 1", etc.
- **FOCO EM PERCEP√á√ïES:** Focar nos pensamentos, percep√ß√µes e sensa√ß√µes da protagonista.

**3. DI√ÅLOGOS EM PRIMEIRA PESSOA (REGRA CR√çTICA):**
- **NUNCA USE DI√ÅLOGO DIRETO:** Falas de outros DEVEM ser integradas √† narrativa.
- **EXEMPLO CORRETO:** "Quando ele me perguntou se eu estava bem, o tom dele era carregado de uma preocupa√ß√£o que me desarmou."

**4. LOCALIZA√á√ÉO E CULTURA (OBRIGAT√ìRIO PARA ESTE NICHO):**
- **CEN√ÅRIO AMERICANO:** A hist√≥ria DEVE se passar nos Estados Unidos.
- **NOMES:** Use nomes comuns americanos (Emily, Michael, Sarah).
- **LUGARES:** Cidades ou estados dos EUA (Beverly Hills, New York).
- **MOEDA:** D√ìLARES ($).

**5. T√âCNICAS NARRATIVAS:**
- **RETEN√á√ÉO:** A cada 25-30 linhas, introduza um gancho (micro-revela√ß√£o, detalhe sensorial, etc.).
- **DESCRI√ß√µes SENSORIAIS:** Enrique√ßa com detalhes do que a protagonista v√™, sente, ouve e cheira.

**6. ESTRUTURA DE SA√çDA:**
- Divida o roteiro em EXATAMENTE ${data.blocks} blocos.
- **AO FINAL DE CADA BLOCO**, inclua uma ficha t√©cnica dos personagens. **Esta ficha N√ÉO CONTA para o limite de caracteres do bloco.**
- **REGRAS PARA A FICHA DE PERSONAGEM:**
    - **DESCRI√á√ÉO DE ROUPAS (REGRA CR√çTICA):** Seja EXTREMAMENTE espec√≠fico. Descreva CADA PE√áA (camisa, cal√ßa, etc.) e sua COR. Ex: "uma camisa de flanela xadrez vermelha e preta, jeans azul escuro".
    - **SEM REFER√äNCIAS VAGAS:** Cada descri√ß√£o deve ser completa, sem referenciar blocos anteriores.
    - **FORMATA√á√ÉO (REGRA CR√çTICA):** Use APENAS negrito para os t√≠tulos. SEM asteriscos ou bullet points.

[EXEMPLO DE FORMATA√á√ÉO DE BLOCO]
[BLOCO 1]
... (texto da hist√≥ria em primeira pessoa com aproximadamente ${data.charsPerBlock} caracteres) ...

üìç PERSONAGENS DO BLOCO 1:
**Nome do Personagem:** [Nome]
**Idade:** [Aproximada]
**Altura:** [Aproximada]
**Corpo:** [Descri√ß√£o detalhada]
**Cabelos:** [Cor e estilo]
**Olhos:** [Cor]
**Roupas:** [Descri√ß√£o espec√≠fica de cada pe√ßa e cor]
**Postura/Maneirismos:** [Descri√ß√£o]
[FIM DO BLOCO 1]

---

**INSTRU√á√ÉO FINAL:**
Gere o roteiro completo. Ap√≥s o √öLTIMO bloco, adicione a se√ß√£o "üìä MATERIAIS COMPLEMENTARES".

`;
    } else if (childrenNicheValues.has(data.structure)) {
      // PROMPT MESTRE PARA O NICHO INFANTIL
      prompt = `
**PROMPT MESTRE DE CRIA√á√ÉO DE ROTEIRO (NICHO: INFANTIL) - TUBEMOTOR AI**

**OBJETIVO:** Gerar um roteiro para v√≠deo infantil (anima√ß√£o ou m√∫sica) inspirado nos princ√≠pios de sucesso de canais como Cocomelon, Little Baby Bum, e Super Simple Songs. O foco √© m√°ximo engajamento e reten√ß√£o para o p√∫blico de 0 a 6 anos.

**DADOS DE ENTRADA:**
- Tema do V√≠deo: ${data.theme}
- F√≥rmula de Estrutura: ${data.structure}
- P√∫blico-Alvo: ${data.audience}
- Idioma: ${data.language}
- N√∫mero de Blocos: ${data.blocks}
- Caracteres por Bloco: ${data.charsPerBlock}

---

**üéØ HACKS DE RETEN√á√ÉO INFANTIL (OBRIGAT√ìRIO SEGUIR):**

**1. REPETI√á√ÉO EXTREMA (REGRA N¬∫ 1):**
- **REFR√ÉOS E PALAVRAS-CHAVE:** Crie um refr√£o simples ou uma frase-chave e repita-o v√°rias vezes ao longo do roteiro. A previsibilidade gera conforto e aprendizado.
- **ESTRUTURA REPETITIVA:** Use padr√µes. Se o v√≠deo √© sobre 5 patinhos, cada estrofe deve seguir uma estrutura muito similar.

**2. LINGUAGEM E RITMO:**
- **VOCABUL√ÅRIO SIMPLES:** Use palavras extremamente simples e adequadas √† faixa et√°ria.
- **FRASES CURTAS E R√çTMICAS:** O texto deve ter uma cad√™ncia quase musical, mesmo que n√£o seja uma can√ß√£o. F√°cil de cantar junto ou memorizar.

**3. FOCO EDUCACIONAL CLARO:**
- Todo roteiro deve ter um objetivo de aprendizado expl√≠cito (aprender cores, n√∫meros, nomes de animais, rotinas como escovar os dentes, etc.).

**4. A√á√ïES E SONS (MUITO IMPORTANTE):**
- **VERBOS DE A√á√ÉO:** Use muitos verbos que incentivem o movimento ("pular", "dan√ßar", "bater palmas").
- **ONOMATOPEIAS:** Seja rico em sons ("vrum vrum", "miau", "pocot√≥"). Isso √© fundamental para prender a aten√ß√£o.

**5. ESTRUTURA DE SA√çDA (COM DIRETRIZES DE ANIMA√á√ÉO):**
- Divida o roteiro em ${data.blocks} blocos de aproximadamente ${data.charsPerBlock} caracteres.
- **INCLUA DIRETRIZES VISUAIS:** Entre colchetes [], adicione sugest√µes simples de anima√ß√£o ou efeitos sonoros. Isso √© crucial para guiar a produ√ß√£o.

**EXEMPLO DE FORMATA√á√ÉO:**

[BLOCO 1]
O sol amarelo diz "bom dia"! [Anima√ß√£o: Sol sorridente aparece no c√©u]
Bom dia, bom dia, que lindo dia! (Repetir 2x)
Vamos todos juntos pular e brincar! [Anima√ß√£o: Personagens pulando de alegria]
Pula, pula, sem parar! Hop, hop, hop!

---

**INSTRU√á√ÉO FINAL:**
Gere o roteiro seguindo TODAS as regras. O resultado deve ser um texto pronto para narra√ß√£o ou para se tornar a letra de uma can√ß√£o, j√° com as diretrizes visuais e sonoras.
`;
    } else {
        // PROMPT GERAL PARA OS DEMAIS NICHOS
        prompt = `
**PROMPT MESTRE DE CRIA√á√ÉO DE ROTEIRO (NICHOS GERAIS) - TUBEMOTOR AI**

**OBJETIVO:** Gerar um roteiro de alta qualidade e reten√ß√£o para o YouTube, agindo como um especialista no nicho e estrutura selecionados.

**DADOS DE ENTRADA:**
- Nicho do Canal: ${data.niche}
- P√∫blico-Alvo: ${data.audience}
- Tema do V√≠deo: ${data.theme}
- Tom Narrativo: ${data.tone}
- Idioma: ${data.language}
- F√≥rmula de Estrutura (Conceito): ${data.structure}
- N√∫mero de Blocos: ${data.blocks}
- Caracteres por Bloco: ${data.charsPerBlock}

---

**üéØ REGRAS FUNDAMENTAIS (OBRIGAT√ìRIO SEGUIR):**

**1. ESPECIALISTA NO NICHO (REGRA N¬∫ 1):**
- Aja como um especialista absoluto no nicho e na "F√≥rmula de Estrutura" selecionada. O conte√∫do deve ser preciso, aprofundado e relevante.
- **CONTEXTO √â REI:** Adapte o contexto (√©poca, local, personalidades, jarg√µes) ao TEMA. **Exemplo: Se o tema √© sobre Sigmund Freud, o roteiro DEVE se passar na Viena do s√©culo XIX/XX, com refer√™ncias e linguagem da √©poca. Se o tema √© sobre Bitcoin, deve usar o contexto e jarg√µes do mercado de criptoativos atual.**

**2. ESTRUTURA E RETEN√á√ÉO:**
- O roteiro deve ser dividido em EXATAMENTE ${data.blocks} blocos.
- Cada bloco deve ter **APROXIMADAMENTE ${data.charsPerBlock} caracteres**.
- O texto deve ser otimizado para narra√ß√£o (voice-over), sendo claro, direto e envolvente.
- Utilize t√©cnicas de storytelling para manter o espectador engajado (perguntas, curiosidade, etc.).

**3. FORMATO DO TEXTO:**
- O texto deve ser limpo, sem marca√ß√µes t√©cnicas como "(pausa)" ou "CENA 1".
- A sa√≠da deve ser um texto corrido, pronto para ser lido.

**4. ESTRUTURA DE SA√çDA:**
- Apresente cada bloco de forma clara, por exemplo: "[BLOCO 1]", seguido do texto, depois "[BLOCO 2]", e assim por diante.

---

**INSTRU√á√ÉO FINAL:**
Gere o roteiro completo seguindo TODAS as regras acima. Ap√≥s o √öLTIMO bloco do roteiro, adicione a se√ß√£o "üìä MATERIAIS COMPLEMENTARES" com t√≠tulos, ideias de thumbnail, tags e descri√ß√µes, todos otimizados para o tema e nicho espec√≠ficos do roteiro que voc√™ criou.

**ESTRUTURA COMPLETA DA RESPOSTA:**

[BLOCO 1]
...texto do bloco 1...

[BLOCO 2]
...texto do bloco 2...

... (continuar para todos os ${data.blocks} blocos) ...

üìä MATERIAIS COMPLEMENTARES
**3 T√≠tulos SEO (M√°ximo 60 caracteres):**
1. 
2. 
3. 

**3 Ideias de Thumbnail:**
1.  **Visual principal:** 
    **Texto em destaque (2-3 palavras):** 
    **Cores dominantes:** 
    **Elementos adicionais:** 
2.  (Repetir estrutura)
3.  (Repetir estrutura)

**10 Tags SEO (separadas por |):**
Tag 1 | Tag 2 | ...

**Descri√ß√£o Curta (150 caracteres):**


**Descri√ß√£o Longa (350 caracteres):**

`;
    }

    const request: { model: string, contents: any, config?: any } = {
        model: 'gemini-2.5-flash',
        contents: [],
    };
    
    const parts: ({ text: string } | { inlineData: { mimeType: string; data: string; } })[] = [{ text: prompt }];

    if (data.referenceFile) {
        parts.unshift({text: `Um arquivo foi anexado como refer√™ncia. Use-o APENAS para inspira√ß√£o de estilo de escrita, tom e conceito. N√ÉO copie nomes de personagens, hist√≥rias ou qualquer conte√∫do direto do arquivo.`})
        parts.push({
            inlineData: {
                mimeType: data.referenceFile.mimeType,
                data: data.referenceFile.data,
            },
        });
        request.contents = { parts };
    } else {
        request.contents = prompt;
    }

    const response: GenerateContentResponse = await gemini.models.generateContent(request);
    
    return response.text ?? '';
  } catch (error) {
    console.error("Error generating script:", error);
    return "Ocorreu um erro ao gerar o roteiro. Por favor, verifique suas configura√ß√µes e tente novamente.";
  }
};

export const refineScript = async (originalScript: string, refinementPrompt: string): Promise<string> => {
  try {
    const gemini = getAI();
    const prompt = `Aja como um roteirista experiente. Recebi o seguinte roteiro:

--- ROTEIRO ORIGINAL ---
${originalScript}
--- FIM DO ROTEIRO ---

Agora, por favor, refine-o seguindo esta instru√ß√£o: "${refinementPrompt}".

Sua tarefa √© modificar o roteiro original com base no pedido. Mantenha o formato, a estrutura de blocos e o tom geral, a menos que a instru√ß√£o pe√ßa para alter√°-los. Retorne APENAS o roteiro completo e refinado, sem adicionar coment√°rios ou explica√ß√µes extras.`;

    const response = await gemini.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt
    });
    return response.text ?? '';
  } catch (error) {
    console.error("Error refining script:", error);
    return "Ocorreu um erro ao refinar o roteiro.";
  }
};

export const generateViralTitles = async (data: ViralTitlesData): Promise<string> => {
  try {
    const gemini = getAI();
    const generationTypeText = data.generationType === 'ready' ? 't√≠tulos prontos, magn√©ticos e irresist√≠veis' : 'estruturas de t√≠tulos virais (f√≥rmulas que podem ser adaptadas)';
    
    const prompt = `Aja como um especialista em copywriting e SEO para YouTube.
Gere 10 ${generationTypeText} para um v√≠deo sobre o tema "${data.topic}".
Os t√≠tulos devem ser curtos, impactantes e otimizados para cliques (CTR).
O idioma de sa√≠da deve ser ${data.language}.
Formate a sa√≠da como uma lista numerada.`;

    const response = await gemini.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt
    });
    return response.text ?? '';
  } catch (error) {
    console.error("Error generating viral titles:", error);
    return "Ocorreu um erro ao gerar os t√≠tulos.";
  }
};

export const translateScript = async (data: ScriptTranslatorData): Promise<string> => {
  try {
    const gemini = getAI();
    const selectedLanguages = Object.entries(data.languages)
      .filter(([, isSelected]) => isSelected)
      .map(([lang]) => lang)
      .join(', ');

    if (!selectedLanguages) {
      return "Por favor, selecione pelo menos um idioma para tradu√ß√£o.";
    }

    const prompt = `Aja como um tradutor profissional.
Traduza o seguinte roteiro para os seguintes idiomas: ${selectedLanguages}.
Mantenha o tom e o significado original.
Para cada idioma, apresente a tradu√ß√£o sob um t√≠tulo claro (ex: "--- TRADU√á√ÉO (Ingl√™s) ---").

Roteiro Original:
---
${data.script}
---`;
    
    const response = await gemini.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt
    });
    return response.text ?? '';
  } catch (error) {
    console.error("Error translating script:", error);
    return "Ocorreu um erro ao traduzir o roteiro.";
  }
};

export const generateScenePrompts = async (data: ScenePromptsData): Promise<string> => {
    try {
        const gemini = getAI();
        const prompt = `Aja como um diretor de arte e especialista em gera√ß√£o de imagens por IA.
Analise o roteiro abaixo e gere uma lista de prompts de imagem, um para cada cena ou par√°grafo significativo.
Os prompts devem ser detalhados e otimizados para o modelo de IA "${data.aiModel}".
O estilo deve ser "${data.style}".
Se o modo de gera√ß√£o for "${data.generationMode}", siga essa diretriz.
Cada prompt deve ser claro e conciso, descrevendo a cena visualmente.

Roteiro:
---
${data.script}
---

Formate a sa√≠da como uma lista numerada de prompts.`;
        const response = await gemini.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt
        });
        return response.text ?? '';
    } catch (error) {
        console.error("Error generating scene prompts:", error);
        return "Ocorreu um erro ao gerar os prompts de cena.";
    }
};

export const generateThumbnailPrompts = async (data: ThumbnailPromptsData): Promise<string> => {
    try {
        const gemini = getAI();
        const phraseInstruction = data.includePhrase ? "O prompt deve incluir uma sugest√£o de texto curto e impactante (2-3 palavras) para ser sobreposto na imagem." : "O prompt n√£o deve incluir texto na imagem.";

        const prompt = `Aja como um especialista em design de thumbnails para YouTube e um mestre em engenharia de prompts para IAs de imagem.
Crie 3 prompts de imagem distintos e de alta qualidade para gerar uma thumbnail para um v√≠deo com o t√≠tulo: "${data.title}".
Os prompts devem ser otimizados para o modelo de IA "${data.aiModel}".
O objetivo √© criar uma imagem que seja visualmente impressionante, gere curiosidade e maximize a taxa de cliques (CTR).
${phraseInstruction}

Para cada prompt, descreva:
- A composi√ß√£o da cena.
- O elemento principal em destaque.
- A ilumina√ß√£o e o esquema de cores.
- A emo√ß√£o a ser transmitida.

Formate a sa√≠da claramente para cada uma das 3 op√ß√µes.`;

        const response = await gemini.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt
        });
        return response.text ?? '';
    } catch (error) {
        console.error("Error generating thumbnail prompts:", error);
        return "Ocorreu um erro ao gerar os prompts de thumbnail.";
    }
};

export const generateImages = async (data: ImageGeneratorData): Promise<string[]> => {
  try {
    const gemini = getAI();
    
    if (data.aiModel === 'nanobanana') {
        const parts: ({ text: string } | { inlineData: { mimeType: string; data: string; } })[] = [{ text: data.prompt }];
        if (data.referenceImage) {
            parts.unshift({
                inlineData: {
                    mimeType: data.referenceImage.mimeType,
                    data: data.referenceImage.data,
                }
            });
        }

        const response = await gemini.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: { parts },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        const images: string[] = [];
        const contentParts = response.candidates?.[0]?.content?.parts;
        if (contentParts) {
            for (const part of contentParts) {
                if (part.inlineData?.data) {
                    images.push(part.inlineData.data);
                }
            }
        }
        return images;
    }

    // Default to ImageFX
    const styleDescriptionMap: { [key: string]: string } = {
        'realistic': 'foto realista, alta defini√ß√£o, 8k',
        'cinematic': 'estilo cinematogr√°fico, ilumina√ß√£o dram√°tica, profundidade de campo',
        'anime': 'estilo anime, tra√ßos vibrantes, cel shading',
        '3d-render': 'renderiza√ß√£o 3D, arte digital, octane render',
        'pixel-art': 'pixel art, 16-bit, estilo retr√¥',
    };
    const styleText = styleDescriptionMap[data.style] || '';
    const fullPrompt = `${data.prompt}, ${styleText}${data.negativePrompt ? `. Elementos a evitar: ${data.negativePrompt}` : ''}`;
    
    const aspectRatioMap: { [key: string]: '1:1' | '16:9' | '9:16' } = {
        '1:1': '1:1',
        '16:9': '16:9',
        '9:16': '9:16',
    };

    const response = await gemini.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: fullPrompt,
        config: {
          numberOfImages: data.numImages,
          outputMimeType: 'image/png',
          aspectRatio: aspectRatioMap[data.aspectRatio] || '1:1',
        },
    });

    return response.generatedImages?.map(img => img.image?.imageBytes ?? '')?.filter(Boolean) ?? [];
  } catch (error) {
    console.error("Error generating images:", error);
    return [];
  }
};

export const generateVideo = async (data: VideoGeneratorData): Promise<string> => {
    try {
        // FIX: Use process.env.API_KEY as per Veo guidelines.
        if (!process.env.API_KEY) {
          throw new Error("The API_KEY environment variable has not been set.");
        }
        // FIX: Create a new instance with the correct API key.
        const videoAI = new GoogleGenAI({ apiKey: process.env.API_KEY });

        const requestPayload: any = {
            model: 'veo-3.1-fast-generate-preview',
            prompt: data.prompt,
            config: {
                numberOfVideos: 1,
                resolution: data.resolution,
                aspectRatio: data.aspectRatio,
            }
        };

        if (data.referenceImage) {
            requestPayload.image = {
                imageBytes: data.referenceImage.data,
                mimeType: data.referenceImage.mimeType,
            };
        }

        let operation = await videoAI.models.generateVideos(requestPayload);
        
        while (!operation.done) {
            await new Promise(resolve => setTimeout(resolve, 10000)); // Poll every 10 seconds
            operation = await videoAI.operations.getVideosOperation({ operation: operation });
        }

        const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;

        if (downloadLink) {
             // The response.body contains the MP4 bytes. You must append an API key when fetching from the download link.
            // FIX: Use process.env.API_KEY for fetching the video as per guidelines.
            const response = await fetch(`${downloadLink}&key=${process.env.API_KEY}`);
            if (!response.ok) {
                throw new Error(`Falha ao baixar o arquivo de v√≠deo. Status: ${response.status}`);
            }
            const blob = await response.blob();
            return URL.createObjectURL(blob);
        } else {
            const errorMessage = (operation as any).error ? `A gera√ß√£o falhou com o erro: ${(operation as any).error.code} - ${(operation as any).error.message}` : "A gera√ß√£o de v√≠deo foi conclu√≠da, mas nenhum link para download foi encontrado.";
            throw new Error(errorMessage);
        }
    } catch (error: any) {
        console.error("Erro detalhado na gera√ß√£o de v√≠deo:", JSON.stringify(error, null, 2));
        
        let message = "Ocorreu um erro desconhecido ao gerar o v√≠deo.";
        if (error.message) {
            if (error.message.includes("RESOURCE_EXHAUSTED")) {
                 message = `Seu limite de uso (quota) foi excedido. Verifique seu plano e detalhes de faturamento.`;
            } else if (error.message.includes("Requested entity was not found.") || error.message.includes("API key not valid")) {
                 message = "API_KEY_ERROR: A chave de API selecionada √© inv√°lida ou n√£o tem as permiss√µes necess√°rias. Por favor, selecione outra chave.";
            } else if (error.message.startsWith('Falha ao baixar o arquivo de v√≠deo')) {
                message = "Erro ao baixar o v√≠deo gerado. A IA processou o pedido, mas n√£o foi poss√≠vel obter o arquivo final.";
            } else {
                message = `Erro: ${error.message}`;
            }
        }
        return message;
    }
};

export const generateSpeech = async (data: TextToSpeechData): Promise<string> => {
  try {
    const gemini = getAI();
    
    const speechConfig: any = {};
    if (data.mode === 'multi' && data.speakers && data.speakers.length === 2) {
      speechConfig.multiSpeakerVoiceConfig = {
        speakerVoiceConfigs: data.speakers.map(s => ({
          speaker: s.speaker,
          voiceConfig: { prebuiltVoiceConfig: { voiceName: s.voice } }
        }))
      };
    } else {
      speechConfig.voiceConfig = {
        prebuiltVoiceConfig: { voiceName: data.singleVoice || 'Kore' },
      };
    }
    
    const textWithInstructions = `${data.styleInstructions ?? ''} ${data.text ?? ''}`.trim();
    
    const fullPrompt = data.mode === 'multi' 
      ? `TTS the following conversation between ${data.speakers?.[0]?.speaker ?? 'Speaker1'} and ${data.speakers?.[1]?.speaker ?? 'Speaker2'}:\n${textWithInstructions}`
      : textWithInstructions;

    const response = await gemini.models.generateContent({
      model: "gemini-2.5-flash-preview-tts",
      contents: [{ parts: [{ text: fullPrompt }] }],
      config: {
        responseModalities: [Modality.AUDIO],
        speechConfig: speechConfig,
        ...(data.temperature !== undefined && { temperature: data.temperature }),
      },
    });
    
    const base64Audio = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
    if (base64Audio) {
      return base64Audio;
    } else {
      throw new Error("Nenhum dado de √°udio foi retornado pela API.");
    }
  } catch (error) {
    console.error("Error generating speech:", error);
    return `Ocorreu um erro ao gerar o √°udio: ${error instanceof Error ? error.message : String(error)}`;
  }
};

export const generateVoiceSample = async (voice: string): Promise<string> => {
  return generateSpeech({
    text: "Ol√°, voc√™ pode usar minha voz para gerar √°udio.",
    styleInstructions: '',
    mode: 'single',
    singleVoice: voice,
    temperature: 1,
    speakers: [],
  });
};


export const convertToSrt = async (data: SrtConverterData): Promise<string> => {
    try {
        const gemini = getAI();
        const prompt = `Aja como uma ferramenta de convers√£o de legendas.
Converta o texto abaixo para o formato .SRT.
Divida o texto em segmentos l√≥gicos para legendas.
Cada legenda deve ter no m√°ximo ${data.charLimit} caracteres por bloco de texto (n√£o por linha).
Gere timestamps apropriados para uma narra√ß√£o com ritmo normal (aproximadamente 150 palavras por minuto).
A sa√≠da deve ser APENAS o conte√∫do do arquivo SRT, formatado corretamente, sem nenhuma explica√ß√£o ou texto adicional.

Texto para converter:
---
${data.text}
---`;
        const response = await gemini.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt
        });
        return response.text ?? '';
    } catch (error) {
        console.error("Error converting to SRT:", error);
        return "Ocorreu um erro ao converter o texto para SRT.";
    }
};

export const splitText = async (data: TextSplitterData): Promise<string> => {
    return new Promise((resolve) => {
        if (!data.text.trim()) {
            return resolve("Nenhum texto para dividir.");
        }

        let parts: string[] = [];
        if (data.splitBy === 'words') {
            const words = data.text.trim().split(/\s+/);
            for (let i = 0; i < words.length; i += data.splitValue) {
                parts.push(words.slice(i, i + data.splitValue).join(' '));
            }
        } else {
            for (let i = 0; i < data.text.length; i += data.splitValue) {
                parts.push(data.text.substring(i, i + data.splitValue));
            }
        }

        resolve(parts.map((part, index) => `--- PARTE ${index + 1} ---\n\n${part}`).join('\n\n'));
    });
};

export const optimizeForCapcut = async (data: CapcutOptimizerData): Promise<string> => {
  try {
    const gemini = getAI();
    const prompt = `Aja como um editor de v√≠deo experiente otimizando um roteiro para o gerador de v√≠deo do CapCut.
**PROBLEMA A SER RESOLVIDO:** O roteiro original est√° muito fragmentado, com muitos par√°grafos curtos, o que gera cenas excessivamente curtas e sem impacto (1-3 segundos) no CapCut.
**SUA TAREFA PRINCIPAL:** O oposto de dividir. Voc√™ deve **AGRUPAR e JUNTAR** par√°grafos e frases curtas que pertencem √† mesma ideia visual ou momento narrativo.
**OBJETIVO:** Criar **MENOS CENAS**, por√©m mais longas e coesas, com uma dura√ß√£o ideal entre 5 e 12 segundos cada.
**REGRAS CR√çTICAS:**
1.  **AGRUPE, N√ÉO DIVIDA:** Sua fun√ß√£o √© consolidar. Junte frases e par√°grafos curtos.
2.  **EVITE CENAS CURTAS:** √â PROIBIDO gerar par√°grafos curtos que resultem em cenas de 1 a 3 segundos.
3.  **EXEMPLO:** Se o texto original for: "O cora√ß√£o me apertou.\\n\\nN√£o era apenas uma pulseira.\\n\\nHavia uma crian√ßa.", voc√™ deve agrup√°-los em um √∫nico par√°grafo coeso.
4.  **N√ÉO ALTERE O TEXTO:** O texto original deve ser 100% preservado. Voc√™ n√£o pode adicionar, remover ou reescrever nenhuma palavra.
5.  **SEM MARCA√á√ïES:** A sa√≠da deve ser um texto limpo, sem "[CENA 1]", "---", ou qualquer outra marca√ß√£o.

**ROTEIRO ORIGINAL:**
---
${data.script}
---

**ROTEIRO OTIMIZADO (SA√çDA ESPERADA):**
`;
    const response = await gemini.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt
    });
    return response.text ?? '';
  } catch (error) {
    console.error("Error optimizing for Capcut:", error);
    return "Ocorreu um erro ao otimizar o roteiro.";
  }
};